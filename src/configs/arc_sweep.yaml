training:
  seed: 0
  resume_from_checkpoint: null
  inference_mode: mean
  batch_size: 8
  gradient_accumulation_steps: 8
  total_num_steps: 1000
  log_every_n_steps: 50
  eval_every_n_logs: 10  # Reduce frequency to save memory
  save_checkpoint_every_n_logs: null
  learning_rate: 4e-4
  prior_kl_coeff: 1e-4
  mixed_precision: True
  online_data_augmentation: True
  task_generator:
    num_workers: 4
    num_pairs: 4
    class: ARC
    only_n_tasks: 5
  train_datasets:

eval:
  eval_datasets:
  
  # SINGLE evaluation dataset with DIFFERENT optimization methods
  test_datasets:
    # - generator: ARC
    #   task_generator_kwargs:
    #     only_n_tasks: ${training.task_generator.only_n_tasks}
    #   name: arc_train_optimisation_comparison
    #   num_pairs: 4
    #   length: 20  # Reduced for memory
    #   batch_size: 16
    #   num_tasks_to_show: 10  # Reduced for memory
    #   inference_mode: mean  # Method 1: Mean inference
      
    # - generator: ARC
    #   task_generator_kwargs:
    #     only_n_tasks: ${training.task_generator.only_n_tasks}
    #   name: generator_gradient_ascent_20
    #   num_pairs: 4
    #   length: 20
    #   batch_size: 16
    #   num_tasks_to_show: 10
    #   inference_mode: gradient_ascent  # Method 2: Gradient ascent with 20 steps
    #   inference_kwargs:
    #     num_steps: 20
    #     lr: 0.1
    #     optimizer: adam
    #     optimizer_kwargs:
    #       b2: 0.9
          
    - generator: ARC
      task_generator_kwargs:
        only_n_tasks: ${training.task_generator.only_n_tasks}
      name: arc_train_optimisation_comparison
      num_pairs: 4
      length: 5
      batch_size: 8
      num_tasks_to_show: 0
      inference_mode: gradient_ascent  # Method 3: Gradient ascent with 100 steps
      inference_kwargs:
        num_steps: 50
        lr: 0.1
        optimizer: adam
        optimizer_kwargs:
          b2: 0.9
        track_progress: True
          
    # - generator: ARC
    #   task_generator_kwargs:
    #     only_n_tasks: ${training.task_generator.only_n_tasks}
    #   name: generator_random_search_20
    #   num_pairs: 4
    #   length: 32
    #   batch_size: 16
    #   num_tasks_to_show: 10
    #   inference_mode: random_search  # Method 4: Random search with 20 samples
    #   inference_kwargs:
    #     num_samples: 20
    #     scale: 1.0
    #     include_mean_latent: True
    #     include_all_latents: False
        
    - generator: ARC
      task_generator_kwargs:
        only_n_tasks: ${training.task_generator.only_n_tasks}
      name: arc_train_optimisation_comparison
      num_pairs: 4
      length: 5
      batch_size: 8
      num_tasks_to_show: 0
      inference_mode: random_search  # Method 5: Random search with 100 samples
      inference_kwargs:
        num_samples: 50
        scale: 1.0
        include_mean_latent: True
        include_all_latents: False
        track_progress: True

  # Remove JSON datasets entirely to focus on generator evaluation
  json_datasets: []

encoder_transformer:
  _target_: models.utils.EncoderTransformerConfig
  max_rows: 30
  max_cols: 30
  num_layers: 2
  transformer_layer:
    _target_: models.utils.TransformerLayerConfig
    num_heads: 8
    emb_dim_per_head: 32
    mlp_dim_factor: 4.0
    dropout_rate: 0.0
    attention_dropout_rate: 0.0
  latent_dim: 32  # This will be swept by Hydra
  variational: True
  latent_projection_bias: False

decoder_transformer:
  _target_: models.utils.DecoderTransformerConfig
  max_rows: 30
  max_cols: 30
  num_layers: 2
  transformer_layer:
    _target_: models.utils.TransformerLayerConfig
    num_heads: 8
    emb_dim_per_head: 32
    mlp_dim_factor: 4.0
    dropout_rate: 0.0
    attention_dropout_rate: 0.0